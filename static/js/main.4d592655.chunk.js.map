{"version":3,"sources":["instruments/onekey.js","instruments/keyboard.js","instruments/instrumentNames.js","instruments/selector.js","App.js","serviceWorker.js","index.js"],"names":["onekey","state","play","audio","Audio","_this","props","theKey","togglePlay","console","log","setState","pause","currentTime","this","prevProps","updateAudio","react_default","a","createElement","Button","onClick","React","Component","keyboard","theInstrument","render","nn","theIns","keyvalue","output","i","value","String","push","instruments_onekey","key","keyname","ButtonToolbar","ButtonGroup","row","names","Example","_useState","useState","_useState2","Object","slicedToArray","dropdownOpen","setDropdownOpen","instru","instrumentNames","map","DropdownItem","chooseInstru","insName","replace","c","toUpperCase","wikilink","Card","body","CardTitle","href","style","padding","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","App","selector","instruments_keyboard","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAgEeA,6MAzDXC,MAAQ,CACJC,MAAM,EACNC,MAAO,IAAIC,MAAMC,EAAKC,MAAMC,WA8BhCC,WAAa,WAET,IAAIL,EAAME,EAAKJ,MAAME,MACrBM,QAAQC,IAAIP,GACZE,EAAKM,SAAS,CAAET,MAAOG,EAAKJ,MAAMC,OAE9BG,EAAKJ,MAAMC,MAIXC,EAAMS,QACNT,EAAMU,YAAY,GAJlBV,EAAMD,mFAlCFK,GACRO,KAAKH,SAAS,CAACR,MAAO,IAAIC,MAAMG,uDAGVQ,GACtBN,QAAQC,IAAIK,GACZD,KAAKE,YAAYD,EAAUR,yCAqC3B,OACIU,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAASP,KAAKN,YAAaM,KAAKb,MAAMC,KAAM,OAAO,gBAnDtDoB,IAAMC,WC8DZC,6MA1DbvB,MAAQ,CACNwB,cAAepB,EAAKC,MAAMmB,0GAa1BhB,QAAQC,IAAI,0BACZI,KAAKY,qCAGHC,GAEF,IAAIC,EAAQ,cAAcd,KAAKR,MAAMmB,cAAc,OAE7CI,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE5CC,EAAS,GACb,IAAK,IAAIC,IAJO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAI9B,CACrB,IAAIC,EAAQH,EAASE,GAAKE,OAAON,GAC7BpB,EAAQqB,EAAO,IAAII,EAAM,OAE7BF,EAAOI,KACLjB,EAAAC,EAAAC,cAACgB,EAAD,CAAQC,IAAKJ,EAAOzB,OAAQA,EAAQ8B,QAASL,KAGjD,OAAOF,mCAIP,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACGzB,KAAK0B,IAAI,KAGdvB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACGzB,KAAK0B,IAAI,KAGdvB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACGzB,KAAK0B,IAAI,aApDClB,IAAMC,mBC2HdkB,EAnIF,CACX,YACA,gBACA,uBACA,wBACA,wBACA,QACA,WACA,WACA,UACA,QACA,eACA,UACA,aACA,eACA,gBACA,eACA,wBACA,UACA,QACA,aACA,eACA,WACA,WACA,aACA,oBACA,gBACA,WACA,uBACA,qBACA,uBACA,wBACA,uBACA,wBACA,mBACA,mBACA,eACA,SACA,QACA,cACA,gBACA,YACA,kBACA,eACA,kBACA,kBACA,eACA,cACA,aACA,eACA,oBACA,mBACA,UACA,YACA,cACA,aACA,kBACA,UACA,OACA,gBACA,kBACA,kBACA,eACA,iBACA,eACA,gBACA,oBACA,UACA,cACA,YACA,gBACA,OACA,UACA,gBACA,kBACA,oBACA,gBACA,aACA,kBACA,cACA,cACA,iBACA,aACA,cACA,YACA,mBACA,UACA,oBACA,WACA,aACA,iBACA,aACA,WACA,aACA,WACA,SACA,QACA,cACA,cACA,cACA,cACA,oBACA,oBACA,eACA,eACA,gBACA,gBACA,cACA,aACA,kBACA,kBACA,aACA,kBACA,iBACA,YACA,UACA,cACA,kBACA,WACA,UACA,OACA,gBACA,aACA,QACA,SACA,aACA,UACA,YACA,6DCtFaC,EApCC,SAACpC,GAAU,IAAAqC,EACiBC,oBAAS,GAD1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChBK,EADgBH,EAAA,GACFI,EADEJ,EAAA,GAOjBK,EAASC,EAAgBC,IAAI,SAACpB,GAEhC,OAAOf,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAcjB,IAAKJ,EAAOX,QAAS,kBAAMf,EAAMgD,aAAatB,KAC9DA,KAIHuB,EAAUjD,EAAM0B,MAAMwB,QAAQ,MAAO,SAAAC,GAAC,OAAIA,EAAEC,gBAI9CC,EAAS,iCAAiCrD,EAAM0B,MACpD,OACIf,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMC,MAAI,GACV5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KAAYP,GACZtC,EAAAC,EAAAC,cAAA,KAAG4C,KAAMJ,EAAUK,MAPT,CACVC,QAAQ,eAMR,QACAhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAUC,OAAQnB,EAAcoB,OApBrB,kBAAMnB,EAAgB,SAAAoB,GAAS,OAAKA,MAqB3CpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAgBC,OAAK,GAArB,qBAGAtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KACKtB,MCDFuB,6MAvBbxE,MAAQ,CACNwB,cAAe,eAIjB6B,aAAa,SAACtB,GACV3B,EAAKM,SAAS,CACZc,cAAcO,6EAMlB,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuD,EAAD,CAAU1C,MAAOlB,KAAKb,MAAMwB,cAAe6B,aAAcxC,KAAKwC,eAC9DrC,EAAAC,EAAAC,cAACwD,EAAD,CAAUlD,cAAeX,KAAKb,MAAMwB,wBAjB1BF,aCEEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASvD,OAAOT,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4d592655.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Button } from 'reactstrap';\n//import theKey from '../resources/sound/accordion-mp3'\n\n\nclass onekey extends React.Component {\n    state = {\n        play: false,\n        audio: new Audio(this.props.theKey)\n    }\n\n    updateAudio(theKey){\n        this.setState({audio: new Audio(theKey)})\n        \n    }\n    componentWillReceiveProps(prevProps){\n        console.log(prevProps)\n        this.updateAudio(prevProps.theKey)\n    }\n\n    /*componentDidMount() {\n        console.log(this.props.theKey)\n        this.updateAudio()\n        //this.audio.addEventListener('ended', () => this.setState({ play: false }));\n\n    }\n\n    /*componentWillUnmount() {\n        audio.removeEventListener('ended', () => this.setState({ play: false }));\n    }*/\n\n    /*togglePlay = () => {\n        this.setState({ play: !this.state.play }, () => {\n            this.state.play ? this.audio.play() : this.audio.pause();\n        });\n    }*/\n    \n\n    togglePlay = () => {\n        \n        let audio=this.state.audio\n        console.log(audio)\n        this.setState({ play: !this.state.play });\n        \n        if(!this.state.play){\n            audio.play()\n        }\n        else{\n            audio.pause()\n            audio.currentTime=0\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.togglePlay}>{this.state.play? 'stop':'play'}</Button>\n\n            </div>\n        );\n    }\n}\n\nexport default onekey;","import React from 'react';\n//import axios from 'axios'\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\n\nimport Onekey from './onekey'\n//import { render } from 'react-dom';\n\n//import theIns from '../resources/sound/cello-mp3'\n\nclass keyboard extends React.Component {\n  state = {\n    theInstrument: this.props.theInstrument\n  }\n  \n\n  /*getSound = () => {\n    axios.get(this.props.theInstrument + '-mp3.json')\n      .then(res => {\n        console.log(res.data)\n        this.setState({ sound: res.data })\n      })\n\n  }*/\n  componentWillReceiveProps(){\n    console.log('keyboard receive props')\n    this.render()\n  }\n\n  row(nn) {\n    \n    let theIns= 'MusyngKite/'+this.props.theInstrument+'-mp3'\n    const keyname = ['Do', 'Re', 'Mi', 'Fa', 'So', 'La', 'Ti']\n    const keyvalue = ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n\n    let output = []\n    for (var i in keyname) {\n      let value = keyvalue[i] + String(nn)\n      let theKey= theIns+'/'+value+'.mp3'\n      \n      output.push(\n        <Onekey key={value} theKey={theKey} keyname={value}></Onekey>\n      )\n    }\n    return output\n  }\n  //console.log(row(3))\n  render() {\n    return (\n      <div>\n        <ButtonToolbar>\n          <ButtonGroup>\n            {this.row(3)}\n          </ButtonGroup>\n        </ButtonToolbar>\n        <ButtonToolbar>\n          <ButtonGroup>\n            {this.row(4)}\n          </ButtonGroup>\n        </ButtonToolbar>\n        <ButtonToolbar>\n          <ButtonGroup>\n            {this.row(5)}\n          </ButtonGroup>\n        </ButtonToolbar>\n      </div>\n    );\n  }\n}\nexport default keyboard;","\nconst names= [\n  \"accordion\",\n  \"acoustic_bass\",\n  \"acoustic_grand_piano\",\n  \"acoustic_guitar_nylon\",\n  \"acoustic_guitar_steel\",\n  \"agogo\",\n  \"alto_sax\",\n  \"applause\",\n  \"bagpipe\",\n  \"banjo\",\n  \"baritone_sax\",\n  \"bassoon\",\n  \"bird_tweet\",\n  \"blown_bottle\",\n  \"brass_section\",\n  \"breath_noise\",\n  \"bright_acoustic_piano\",\n  \"celesta\",\n  \"cello\",\n  \"choir_aahs\",\n  \"church_organ\",\n  \"clarinet\",\n  \"clavinet\",\n  \"contrabass\",\n  \"distortion_guitar\",\n  \"drawbar_organ\",\n  \"dulcimer\",\n  \"electric_bass_finger\",\n  \"electric_bass_pick\",\n  \"electric_grand_piano\",\n  \"electric_guitar_clean\",\n  \"electric_guitar_jazz\",\n  \"electric_guitar_muted\",\n  \"electric_piano_1\",\n  \"electric_piano_2\",\n  \"english_horn\",\n  \"fiddle\",\n  \"flute\",\n  \"french_horn\",\n  \"fretless_bass\",\n  \"fx_1_rain\",\n  \"fx_2_soundtrack\",\n  \"fx_3_crystal\",\n  \"fx_4_atmosphere\",\n  \"fx_5_brightness\",\n  \"fx_6_goblins\",\n  \"fx_7_echoes\",\n  \"fx_8_scifi\",\n  \"glockenspiel\",\n  \"guitar_fret_noise\",\n  \"guitar_harmonics\",\n  \"gunshot\",\n  \"harmonica\",\n  \"harpsichord\",\n  \"helicopter\",\n  \"honkytonk_piano\",\n  \"kalimba\",\n  \"koto\",\n  \"lead_1_square\",\n  \"lead_2_sawtooth\",\n  \"lead_3_calliope\",\n  \"lead_4_chiff\",\n  \"lead_5_charang\",\n  \"lead_6_voice\",\n  \"lead_7_fifths\",\n  \"lead_8_bass__lead\",\n  \"marimba\",\n  \"melodic_tom\",\n  \"music_box\",\n  \"muted_trumpet\",\n  \"oboe\",\n  \"ocarina\",\n  \"orchestra_hit\",\n  \"orchestral_harp\",\n  \"overdriven_guitar\",\n  \"pad_1_new_age\",\n  \"pad_2_warm\",\n  \"pad_3_polysynth\",\n  \"pad_4_choir\",\n  \"pad_5_bowed\",\n  \"pad_6_metallic\",\n  \"pad_7_halo\",\n  \"pad_8_sweep\",\n  \"pan_flute\",\n  \"percussive_organ\",\n  \"piccolo\",\n  \"pizzicato_strings\",\n  \"recorder\",\n  \"reed_organ\",\n  \"reverse_cymbal\",\n  \"rock_organ\",\n  \"seashore\",\n  \"shakuhachi\",\n  \"shamisen\",\n  \"shanai\",\n  \"sitar\",\n  \"slap_bass_1\",\n  \"slap_bass_2\",\n  \"soprano_sax\",\n  \"steel_drums\",\n  \"string_ensemble_1\",\n  \"string_ensemble_2\",\n  \"synth_bass_1\",\n  \"synth_bass_2\",\n  \"synth_brass_1\",\n  \"synth_brass_2\",\n  \"synth_choir\",\n  \"synth_drum\",\n  \"synth_strings_1\",\n  \"synth_strings_2\",\n  \"taiko_drum\",\n  \"tango_accordion\",\n  \"telephone_ring\",\n  \"tenor_sax\",\n  \"timpani\",\n  \"tinkle_bell\",\n  \"tremolo_strings\",\n  \"trombone\",\n  \"trumpet\",\n  \"tuba\",\n  \"tubular_bells\",\n  \"vibraphone\",\n  \"viola\",\n  \"violin\",\n  \"voice_oohs\",\n  \"whistle\",\n  \"woodblock\",\n  \"xylophone\"\n]\n\nexport default names\n\n\n","\nimport instrumentNames from './instrumentNames'\n\nimport React, { useState } from 'react';\nimport { Card, CardTitle, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\n\nconst Example = (props) => {\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(prevState => !prevState);\n\n    //const [selection, setSelection]=useState('select instrument')\n    \n    const instru = instrumentNames.map((value) => {\n        \n        return <DropdownItem key={value} onClick={() => props.chooseInstru(value)}>\n            {value}\n        </DropdownItem>\n    })\n\n    const insName = props.value.replace(/^\\w/, c => c.toUpperCase())\n    let wikistyle={\n        padding:'0 0 10px 0'\n    }\n    let wikilink=\"https://en.wikipedia.org/wiki/\"+props.value\n    return (\n        <Card body>\n        <CardTitle>{insName}</CardTitle>\n        <a href={wikilink} style={wikistyle}>wiki</a>\n        <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n            <DropdownToggle caret>\n                Select Instrument\n        </DropdownToggle>\n            <DropdownMenu>\n                {instru}\n            </DropdownMenu>\n        </Dropdown>\n      </Card>\n        \n    );\n}\n\nexport default Example\n\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Keyboard from './instruments/keyboard'\n\n\nimport Selector from './instruments/selector'\n//import midi from './instruments/midi'\n\n\nclass App extends Component {\n  state = {\n    theInstrument: 'accordion',\n    \n  }\n  \n  chooseInstru=(value)=> {\n      this.setState({\n        theInstrument:value,\n      })\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Selector value={this.state.theInstrument} chooseInstru={this.chooseInstru} />\n        <Keyboard theInstrument={this.state.theInstrument} />\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}